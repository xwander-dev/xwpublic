#!/usr/bin/env python3
"""
generate_api_config.py - Generate configuration files for API access

This tool creates configuration files for various APIs used in XwanderDev projects.
It securely stores API keys and other sensitive configuration in the user's home directory.
"""

import os
import sys
import json
import argparse
from pathlib import Path
from getpass import getpass

def create_perplexity_config(api_key=None):
    """Create a configuration file for Perplexity API."""
    config_path = os.path.expanduser("~/.perplexity.json")
    
    # Check if config already exists
    if os.path.exists(config_path):
        print(f"Configuration file already exists at {config_path}")
        overwrite = input("Overwrite? (y/N): ").lower() == 'y'
        if not overwrite:
            return
    
    # Get API key if not provided
    if not api_key:
        api_key = getpass("Enter Perplexity API key: ")
    
    # Create config
    config = {
        "api_key": api_key,
        "api_url": "https://api.perplexity.ai/",
        "model": "sonar-medium-online",
        "max_tokens": 1000
    }
    
    # Write config
    with open(config_path, "w") as f:
        json.dump(config, f, indent=2)
    
    # Set permissions to user-only read/write
    os.chmod(config_path, 0o600)
    
    print(f"Perplexity API configuration created at {config_path}")

def create_github_config(token=None):
    """Create a configuration file for GitHub API."""
    config_path = os.path.expanduser("~/.github.json")
    
    # Check if config already exists
    if os.path.exists(config_path):
        print(f"Configuration file already exists at {config_path}")
        overwrite = input("Overwrite? (y/N): ").lower() == 'y'
        if not overwrite:
            return
    
    # Get token if not provided
    if not token:
        token = getpass("Enter GitHub token: ")
    
    # Create config
    config = {
        "token": token,
        "api_url": "https://api.github.com/"
    }
    
    # Write config
    with open(config_path, "w") as f:
        json.dump(config, f, indent=2)
    
    # Set permissions to user-only read/write
    os.chmod(config_path, 0o600)
    
    print(f"GitHub API configuration created at {config_path}")

def create_env_file(perplexity_key=None, github_token=None):
    """Create a .env file with API keys."""
    env_path = ".env"
    
    # Check if file already exists
    if os.path.exists(env_path):
        print(f"Environment file already exists at {env_path}")
        overwrite = input("Overwrite? (y/N): ").lower() == 'y'
        if not overwrite:
            return
    
    # Get keys if not provided
    if not perplexity_key:
        perplexity_key = getpass("Enter Perplexity API key: ")
    
    if not github_token:
        github_token = getpass("Enter GitHub token: ")
    
    # Create content
    content = f"""# XwanderDev configuration
# Generated by generate_api_config.py

PERPLEXITY_API_KEY={perplexity_key}
GITHUB_TOKEN={github_token}
"""
    
    # Write file
    with open(env_path, "w") as f:
        f.write(content)
    
    # Set permissions to user-only read/write
    os.chmod(env_path, 0o600)
    
    print(f"Environment file created at {env_path}")
    print("WARNING: Do not commit this file to version control!")

def main():
    """Main entry point for the configuration generator."""
    parser = argparse.ArgumentParser(
        description="Generate configuration files for API access"
    )
    
    parser.add_argument("--perplexity", action="store_true",
                      help="Create Perplexity API configuration")
    parser.add_argument("--github", action="store_true",
                      help="Create GitHub API configuration")
    parser.add_argument("--env", action="store_true",
                      help="Create .env file with all API keys")
    parser.add_argument("--perplexity-key", help="Perplexity API key")
    parser.add_argument("--github-token", help="GitHub token")
    parser.add_argument("--all", action="store_true",
                      help="Create all configuration files")
    
    args = parser.parse_args()
    
    # Create configurations based on arguments
    if args.all or (not args.perplexity and not args.github and not args.env):
        create_perplexity_config(args.perplexity_key)
        create_github_config(args.github_token)
        create_env_file(args.perplexity_key, args.github_token)
    else:
        if args.perplexity:
            create_perplexity_config(args.perplexity_key)
        if args.github:
            create_github_config(args.github_token)
        if args.env:
            create_env_file(args.perplexity_key, args.github_token)

if __name__ == "__main__":
    main()